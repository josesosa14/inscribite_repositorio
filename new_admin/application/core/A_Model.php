<?phpdefined('BASEPATH') OR exit('No direct script access allowed');/** * @property \Doctrine\ORM\EntityManager $orm * */class A_Model extends CI_Model {    private $tabla;    /**     * Modelo Principal     */    public function __construct() {        parent::__construct();        $this->load->library("doctrine");        $this->orm = $this->doctrine->em;    }    public function limpiarArrayCollection(&$array) {        foreach ($array as $cada_row) {            $this->orm->remove($cada_row);        }    }    public function crearPassword() {        $str = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890";        $cad = "";        for ($i = 0; $i < 12; $i++) {            $cad .= substr($str, rand(0, 62), 1);        }        return $cad;    }    public function getAll($tabla) {        $consulta = $this->db->get($tabla);        return $consulta;    }    public function getFrom($tabla, $limit = false, $offset = false) {        $consulta = $this->db->get('mytable', $limit, $offset);        return $consulta->result();    }    public function runQuery($query) {        $consulta = $this->db->query($query);        return $consulta->result();    }    public function runArrayQuery($query) {        $consulta = $this->db->query($query);        return $consulta->result_array();    }    function getTabla() {        return $this->tabla;    }    function setTabla($tabla) {        $this->tabla = $tabla;    }    public function cargarClase($clase) {        $this->load->library($clase);    }    public function borrarPorId($id) {        $this->db->delete($this->getTabla(), array('id' => $id));    }    function listar($clase) {        $bag = $this->orm->getRepository($clase);        $objetos = $bag->findAll();        return $objetos;    }    function listar_order($clase, $order) {        $query = "SELECT c FROM $clase c $order";        $query = $this->orm->createQuery($query);        return $query->getResult();    }    function toDebug() {        echo "\Doctrine\Common\Util\Debug::dump($this)";    }    function getAllCollection($clase) {        $bag = $this->orm->getRepository($clase);        return $bag->findAll();    }    public function post($dato = false) {        if ($dato) {            return $this->input->post($dato);        } else {            return $this->input->post();        }    }    function guardar($objeto) {        $this->orm->persist($objeto);        $this->orm->flush();    }    function giveMe($clase, $id) {        $objeto = $this->orm->find($clase, $id);        return $objeto;    }    public function imprimirYmorir(&$data) {        echo '<pre>';        print_r($data);        die();    }    public function getCollectionByid($clase, $id) {        $bag = $this->orm->getRepository($clase);        return $bag->find($id);    }    public function getCollectionByIds($clase, $ids) {        $query = $this->orm->createQuery("SELECT b FROM $clase b WHERE b.id in($ids)");        return $query->getResult();    }    public function getObject($consulta) {        $query = $this->db->query($consulta);        return $query->row();    }    public function getObjects($consulta) {        $query = $this->db->query($consulta);        return $query->result_object();    }    function esRol($rol) {        if ($_SESSION['rol'] == $rol) {            return true;        } else {            return false;        }    }    public function mandaMail($para, $titulo, $texto, $empresa = false, $incluye_admin = false) {        $mensaje = $texto;        $mail = new PHPMailer();        $mail->IsSMTP();        $mail->SMTPAuth = true;        $mail->Host = MAIL_HOST;        $mail->Username = MAIL_USER;        $mail->Password = MAIL_PASSWORD;        $mail->WordWrap = 50;        $mail->From = MAIL_FROM;        $mail->FromName = MAIL_FROM_NAME;        $mail->Subject = $titulo;        $mail->MsgHTML($mensaje);        if (ENVIRONMENT == "production") {            $mail->AddAddress($para, ($empresa ? $empresa : MAIL_FROM_NAME));        } else {            $mail->AddAddress($para, ($empresa ? $empresa : MAIL_FROM_NAME));            if ($incluye_admin) {                //$mail->AddCC(TEST_MAIL2, ($empresa ? $empresa : MAIL_FROM_NAME));            } else {                //$mail->AddCC(TEST_MAIL2, ($empresa ? $empresa : MAIL_FROM_NAME));            }        }        if (!$mail->Send()) {            /*$response = "Mailer Error: " . $mail->ErrorInfo;            die('error en enviar mail');*/            return false;        } else {            return true;        }    }    public function mailSimple($para, $titulo, $texto) {        $emailAddr = $para;        $subject = $titulo;        header('Content-Type: text/html; charset=UTF-8');        $mensaje = "<body>                        <div style='text-align:center'>                            $texto                        </div>                    </body>                    </html>";        $mail = new PHPMailer();        $mail->IsSMTP();        $mail->SMTPAuth = true;        $mail->Host = "mail.puranautica.com";        $mail->Username = "consultas@puranautica.com";        $mail->Password = "Hcataldo2015!?";        $mail->Port = 26;        $mail->From = "consultas@puranautica.com";        $mail->FromName = "PuraNautica";        $mail->Subject = $subject;        $mail->MsgHTML($mensaje);        // Add as many as you want        $mail->AddAddress($emailAddr, "PuraNautica");        //$response = NULL;        if (!$mail->Send()) {            $response = "Mailer Error: " . $mail->ErrorInfo;            return false;        } else {            return true;        }    }}