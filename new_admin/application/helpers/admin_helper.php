<?phpif (!defined('BASEPATH'))    exit('No direct script access allowed');function converArraySerializeToArrayData($information) {    $out = array();    $k = 0;    $hasta = 7;    $parametros = array(        0 => "tipo_cuenta",        1 => "nro_cuenta",        2 => "cbu",        3 => "titular",        4 => "banco",        5 => "cuit",        6 => "importe");    $cant_destinos=0;    foreach ($information as $parametro) {        if ($k == $hasta) {            $k = 0;            $cant_destinos++;        }        $out[$cant_destinos][$parametros[$k]] = $parametro['value'];        $k++;    }    return $out;}function to_excel($sql, $filename = 'exceloutput') {    $headers = ''; // just creating the var for field headers to append to below    $data = ''; // just creating the var for field data to append to below    $obj = &get_instance();    $query = $sql["query"];    $fields = $sql["fields"];    if ($query->num_rows() == 0) {        echo '<p>The table appears to have no data.</p>';    } else {        foreach ($fields as $field) {            $headers .= $field . "\t";        }        $renglones = $query->result();        if ($renglones) {            foreach ($renglones as $row) {                $line = '';                foreach ($row as $value) {                    if ((!isset($value)) OR ( $value == "")) {                        $value = "\t";                    } else {                        $value = str_replace('"', '""', $value);                        $value = '"' . $value . '"' . "\t";                    }                    $line .= $value;                }                $data .= trim($line) . "\n";            }            $data = str_replace("\r", "", $data);            header("Content-type: application/x-msdownload");            header("Content-Disposition: attachment; filename=$filename.xls");            echo mb_convert_encoding("$headers\n$data", 'utf-16', 'utf-8');        } else {            die('no tenemos renglones pa');        }    }}function baseAdminUrl() {    return base_url() . "public/admin/";}function agceros($nombreag, $cantceros) {    while (strlen($nombreag) < $cantceros)        $nombreag = "0" . $nombreag;    return $nombreag;}function fotos_url() {    return FOTO_URL;}function estaLogeado() {    if ($_SESSION['usuario']) {        return true;    }    redirect('ingreso');}function fechaByInt($int) {    $fecha_str = substr($int, 0, 4) . '-' . substr($int, 4, 2) . '-' . substr($int, 6, 2);    return $fecha_str;}function reArrayFiles(&$file_post) {    $file_ary = array();    $file_count = count($file_post['name']);    $file_keys = array_keys($file_post);    for ($i = 0; $i < $file_count; $i++) {        foreach ($file_keys as $key) {            $file_ary[$i][$key] = $file_post[$key][$i];        }    }    return $file_ary;}function tienePermiso($permiso_pedido) {    $roles = $_SESSION['rol'];    foreach ($roles as $permiso) {        if ($permiso['nombre'] == $permiso_pedido) {            return true;        }    }    return false;}function getTiposDocumentos() {    $tipos = array(        "factura a" => "Factura A",        "factura b" => "Factura B",        "factura c" => "Factura C",        "factura m" => "Factura M",        "nota credito a" => "Nota Crédito A",        "nota credito b" => "Nota Crédito B",        "nota credito c" => "Nota Crédito C",        "nota credito m" => "Nota Crédito M",        "nota debito a" => "Nota Debito A",        "nota debito b" => "Nota Debito B",        "nota debito c" => "Nota Debito C",        "nota debito m" => "Nota Debito M",    );    return $tipos;}function getLabelTipoDocumento($tipo) {    $tipos = getTiposDocumentos();    if (array_key_exists($tipo, $tipos)) {        return $tipos[$tipo];    } else {        return "";    }}function generaHtmlMostrarVino($vinos) {    foreach ($vinos as $vino):        echo '        <div class="text-center all">            <div class="container">                <div class="wrapper-content" style="padding:0">                    <div class="wrapper-form-compras">                        <div class="row table-row">                            <div class="col-xs-3 text-center">                                <img src="' . base_url() . 'public/images/bramare_lujan_de_cuyo_mc.png" class="img-responsive" style="height:170px">                             </div>                            <div class="col-xs-9">                                <div class="text-left">                                    <h4 style="color:#8D2440">' . $vino->getNombre() . '</h4>                                    <h5 style="color:#606062"><strong>' . $vino->getVariedad() . '</strong></h5>                                    <h5 style="color:#a3a3a5">Bodega: ' . $vino->getBodega() . '</h5>                                 </div>                                <div class="text-center" style="width: 44.33333333%;float:right">                                    <h3 class="precio-antes">$' . $vino->getPrecio_sugerido() . '</h3>                                    <h1 class="precio"><small>$</small><strong>' . $vino->getPrecio() . '</strong></h1>                                 </div>                            </div>                        </div>                        <div class="row table-row info-pedir">                            <div class="col-xs-4">                                <span>MATCHEO</span>                                <span class="matcheo">%' . round($vino->matcheo) . '</span>                            </div>                            <div class="col-xs-4" style="border-right: 2px solid #fff;border-left: 2px solid #fff"></div>                            <div class="col-xs-4 pedir">                                <a><img src="' . base_url() . 'public/images/pedir.png" class="img-responsive"></a>                            </div>                        </div>                    </div>                    </div>            </div>        </div>';    endforeach;}function accessList() {    /*      $ip_permitidas = array(      '198.154.235.144',      '190.12.103.42',      '186.23.5.148',      '200.41.233.228',      '181.16.49.14',      '190.17.189.173',      '190.247.205.86',      '190.246.179.86'      ); */    if (in_array($_SERVER['REMOTE_ADDR'], $ip_permitidas)) {        return true;    } else {        return false;    }}function imprimirYMorir($item) {    imprimir($item);    die();}function insertArray($tabla, $parameters, $mysqli, $fields = null) {    $parameters = lowerParameters($parameters);    if (!$fields) {        $fields = parseTableSchema($tabla, $mysqli);    }    $values = parseValuesInsertArray($fields, $parameters);    $query = "INSERT INTO $tabla ($fields) VALUES $values";    $mysqli->query($query);}function lowerParameters($parameters) {    //addslashes a todos los parametros, strlower y null en caso vacio    $data = null;    if ($parameters) {        foreach ($parameters as $key => $each) {            if (is_array($each)) {                $data[$key] = lowerParameters($each);            } else {                $data[$key] = strtolower($each);            }        }    }    return $data;}function clean($string) {    $string = str_replace(' ', '-', $string); // Replaces all spaces with hyphens.    return preg_replace('/[^A-Za-z0-9\-]/', '', $string); // Removes special chars.}function parseValuesInsertArray($fields, $parameters) {    //definiciones    $values = "";    $array_fields = explode(',', $fields);    $key = 0;    foreach ($parameters as $array_parameter) {        if ($key != 0) {            $values .= ',(';        } else {            $values .= '(';        }        $key++;        $cont = 0;        foreach ($array_fields as $field) {            foreach ($array_parameter as $name_parameter => $value_parameter) {                if ($field == $name_parameter) {                    if ($cont == 0) {                        $values .= "'" . clean($value_parameter) . "'";                    } else {                        $values .= ",'" . clean($value_parameter) . "'";                    }                    $cont++;                }            }        }        $values .= ')';    }    return $values;}function parseTableSchema($tabla, $mysqli) {    $dbname = "admin_inscribite";    $key = 0;    $fields = getArrayQuery('SELECT column_name FROM information_schema.columns where table_name = "' . $tabla . '" and table_schema = "' . $dbname . '" and extra != "auto_increment" AND data_type != "timestamp" ', $mysqli);    //echo '<pre>';print_r($fields);die;    foreach ($fields as $field) {        if ($key == 0) {            $data = $field['column_name'];        } else {            $data .= ',' . $field['column_name'];        }        $key++;    }    return (($data) ? $data : "");}function getArrayQuery($query, $db2) {    return $db2->query($query)->result_array();}function imprimir($item) {    echo '<pre>';    print_r($item);    echo '</pre>';}function seoUrl($string) {// Lower case everything    $string = strtolower($string);// Make alphanumeric (removes all other characters)    $string = preg_replace("/[^a-z0-9_\s-]/", "", $string);// Clean up multiple dashes or whitespaces    $string = preg_replace("/[\s-]+/", " ", $string);// Convert whitespaces and underscore to dash    $string = preg_replace("/[\s_]/", "-", $string);    $remplazar = array(        "!",        "¿",        "?",        "¡",        "@"    );    $string = str_replace($remplazar, "-", $string);    return $string;}function parseGetParametersToOne($array) {    $out = "";    $cont = 0;    foreach ($array as $name_parameter => $parameter) {        if (!is_array($parameter) && strlen($parameter) == 0) {            continue;        }        if (is_array($parameter)) {            $parameter = implode(",", $parameter);        }        if ($cont == 0) {            $out .= $name_parameter . '_' . filter_var($parameter, FILTER_SANITIZE_URL);        } else {            $out .= "-" . $name_parameter . '_' . filter_var($parameter, FILTER_SANITIZE_URL);        }        $cont ++;    }    return $out;}function parseParameterToArray($parameter) {    $parameters = explode("-", $parameter);    $out = array();    foreach ($parameters as $cada_parametro) {        $aux = explode("_", $cada_parametro);        if (strpos($aux[1], ",")) {            $aux[1] = explode(",", $aux[1]);        }        $out[$aux[0]] = $aux[1];    }    return $out;}function crearPassword() {    $str = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890";    $cad = "";    for ($i = 0; $i < 12; $i++) {        $cad .= substr($str, rand(0, 62), 1);    }    return $cad;}function thumbnailImage($imagePath) {    $imgPath = $imagePath;    $imgWidth = "250";    $imgHeight = "195";    image_create($imgPath, $imgWidth, $imgHeight, IMG_THUMB);}function thumbnailCatalogo($imagePath) {    $imgPath = $imagePath;    $imgWidth = "300";    $imgHeight = "185";    image_create($imgPath, $imgWidth, $imgHeight, IMG_THUMB_CAT);}function thumbnailSlider($imagePath) {    $imgPath = $imagePath;    $imgWidth = "800";    $imgHeight = "520";    image_create($imgPath, $imgWidth, $imgHeight, IMG_SLIDER);}function resizeImagen($image, $extension) {    $im = new Imagick();    $im->pingImage($image);    $im->readImage($image);    $im->setimageformat($extension);    list ($width, $height) = getimagesize($image);    if ($width >= 640 && $height >= 480) {        $im->thumbnailimage(640, 0);        $im->writeimage($image);    }}function image_create($imagePath, $width, $height, $dir_final) {    try {        $image = $imagePath;        $im = new Imagick();        $im->pingImage($image);        $im->readImage($image);        $datos_imagen = explode(DIRECTORY_SEPARATOR, $imagePath);        $datos_imagen = $datos_imagen[count($datos_imagen) - 1];        $imageExt = substr($datos_imagen, strrpos($datos_imagen, '.') + 1);        $nombre = substr($datos_imagen, 0, strlen($datos_imagen) - strlen($imageExt) - 1);        $im->setImageFormat($imageExt);        $im->cropThumbnailImage($width, $height);        $im->writeImage($dir_final . $nombre . "_thumb." . $imageExt);        $im->destroy();    } catch (Exception $e) {        echo $e->getMessage();    }}function image_create_slider($imagePath, $width, $height, $dir_final) {    try {        $image = $imagePath;        $im = new Imagick($image);        $im->stripimage();        $im->setImageResolution($width, $height);        $im->resampleImage($width, $height, imagick::FILTER_UNDEFINED, 1);        $geometry = $im->getImageGeometry();        if (($geometry['width'] / $width) > ($geometry['height'] / $height)) {            $im->scaleImage($width, 0);        } else {            $im->scaleImage(0, $height);        }        $im->setImageCompression(Imagick::COMPRESSION_JPEG);        $im->setImageCompressionQuality(40);        $im->setImageFormat('jpg');        $im->stripImage();        $im->setinterlacescheme(Imagick::INTERLACE_PLANE);        $im->setimagecolorspace(Imagick::COLORSPACE_RGB);        $datos_imagen = explode("/", $imagePath);        $datos_imagen = $datos_imagen[count($datos_imagen) - 1];        $imageExt = substr($datos_imagen, strrpos($datos_imagen, '.') + 1);        $nombre = substr($datos_imagen, 0, strlen($datos_imagen) - strlen($imageExt) - 1);        $im->writeImage($dir_final . $nombre . "_thumb.jpg");        $im->destroy();    } catch (Exception $e) {        echo $e->getMessage();    }}function imprimirArray($array, $terminar = false) {    echo '<pre>';    print_r($array);    echo '</pre>';    if ($terminar) {        die;    }}function sube_archivo($archivo, $destino, $nombre) {    $destino = $destino . $nombre . "." . $archivo['type'];    $origen = $archivo['tmp_name'];    if (file_exists($destino)) {        unlink($destino);    }    move_uploaded_file($origen, $destino);    return $nombre . "." . $archivo['type'];}function guardarFoto($foto, $destino, $nombre, $crop = false, $width = 270, $height = 270, $proporcional = false) {    $extension = ($foto['type'] == "image/png") ? "image/png" : "jpg";    $destino = $destino . $nombre . "." . $extension;    $origen = $foto['tmp_name'];    if (file_exists($destino)) {        unlink($destino);    }    move_uploaded_file($origen, $destino);    list($img_width, $img_height) = getimagesize($destino);    if ($crop && ($img_width > $width && $img_height > $height)) {        smart_resize_image($destino, null, $width, $height, $proporcional, $destino, false, false, 90);    }    return $nombre . "." . $extension;}/** * easy image resize function * @param  $file - file name to resize * @param  $string - The image data, as a string * @param  $width - new image width * @param  $height - new image height * @param  $proportional - keep image proportional, default is no * @param  $output - name of the new file (include path if needed) * @param  $delete_original - if true the original image will be deleted * @param  $use_linux_commands - if set to true will use "rm" to delete the image, if false will use PHP unlink * @param  $quality - enter 1-100 (100 is best quality) default is 100 * @return boolean|resource */function smart_resize_image($file, $string = null, $width = 0, $height = 0, $proportional = false, $output = 'file', $delete_original = true, $use_linux_commands = false, $quality = 100) {    if ($height <= 0 && $width <= 0)        return false;    if ($file === null && $string === null)        return false;# Setting defaults and meta    $info = $file !== null ? getimagesize($file) : getimagesizefromstring($string);    $image = '';    $final_width = 0;    $final_height = 0;    list($width_old, $height_old) = $info;    $cropHeight = $cropWidth = 0;# Calculating proportionality    if ($proportional) {        if ($width == 0)            $factor = $height / $height_old;        elseif ($height == 0)            $factor = $width / $width_old;        else            $factor = min($width / $width_old, $height / $height_old);        $final_width = round($width_old * $factor);        $final_height = round($height_old * $factor);    }    else {        $final_width = ( $width <= 0 ) ? $width_old : $width;        $final_height = ( $height <= 0 ) ? $height_old : $height;        $widthX = $width_old / $width;        $heightX = $height_old / $height;        $x = min($widthX, $heightX);        $cropWidth = ($width_old - $width * $x) / 2;        $cropHeight = ($height_old - $height * $x) / 2;    }# Loading image to memory according to type    switch ($info[2]) {        case IMAGETYPE_JPEG: $file !== null ? $image = imagecreatefromjpeg($file) : $image = imagecreatefromstring($string);            break;        case IMAGETYPE_GIF: $file !== null ? $image = imagecreatefromgif($file) : $image = imagecreatefromstring($string);            break;        case IMAGETYPE_PNG: $file !== null ? $image = imagecreatefrompng($file) : $image = imagecreatefromstring($string);            break;        default: return false;    }# This is the resizing/resampling/transparency-preserving magic    $image_resized = imagecreatetruecolor($final_width, $final_height);    if (($info[2] == IMAGETYPE_GIF) || ($info[2] == IMAGETYPE_PNG)) {        $transparency = imagecolortransparent($image);        $palletsize = imagecolorstotal($image);        if ($transparency >= 0 && $transparency < $palletsize) {            $transparent_color = imagecolorsforindex($image, $transparency);            $transparency = imagecolorallocate($image_resized, $transparent_color['red'], $transparent_color['green'], $transparent_color['blue']);            imagefill($image_resized, 0, 0, $transparency);            imagecolortransparent($image_resized, $transparency);        } elseif ($info[2] == IMAGETYPE_PNG) {            imagealphablending($image_resized, false);            $color = imagecolorallocatealpha($image_resized, 0, 0, 0, 127);            imagefill($image_resized, 0, 0, $color);            imagesavealpha($image_resized, true);        }    }    imagecopyresampled($image_resized, $image, 0, 0, $cropWidth, $cropHeight, $final_width, $final_height, $width_old - 2 * $cropWidth, $height_old - 2 * $cropHeight);# Taking care of original, if needed    if ($delete_original) {        if ($use_linux_commands)            exec('rm ' . $file);        else            @unlink($file);    }# Preparing a method of providing result    switch (strtolower($output)) {        case 'browser':            $mime = image_type_to_mime_type($info[2]);            header("Content-type: $mime");            $output = NULL;            break;        case 'file':            $output = $file;            break;        case 'return':            return $image_resized;            break;        default:            break;    }# Writing image according to type to the output destination and image quality    switch ($info[2]) {        case IMAGETYPE_GIF: imagegif($image_resized, $output);            break;        case IMAGETYPE_JPEG: imagejpeg($image_resized, $output, $quality);            break;        case IMAGETYPE_PNG:            $quality = 9 - (int) ((0.9 * $quality) / 10.0);            imagepng($image_resized, $output, $quality);            break;        default: return false;    }    return true;}